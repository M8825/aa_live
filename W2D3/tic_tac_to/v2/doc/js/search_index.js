var search_data = {"index":{"searchIndex":["board","game","humanplayer","empty?()","empty_position?()","get_position()","new()","new()","new()","place_mark()","play()","print()","switch_turn()","valid?()","win?()","win_col?()","win_diagonal?()","win_row?()"],"longSearchIndex":["board","game","humanplayer","board#empty?()","board#empty_position?()","humanplayer#get_position()","board::new()","game::new()","humanplayer::new()","board#place_mark()","game#play()","board#print()","game#switch_turn()","board#valid?()","board#win?()","board#win_col?()","board#win_diagonal?()","board#win_row?()"],"info":[["Board","","Board.html","","<p>The Board class is responsible for adding a player’s marks, checking for winners and printing the …\n"],["Game","","Game.html","","<p>Main class, houses instances of Board and HumanPlayer It’s responsible for passing data between the …\n"],["HumanPlayer","","HumanPlayer.html","","<p>The HumanPlayer class is responsible for holding information about the user and prompting them to enter …\n"],["empty?","Board","Board.html#method-i-empty-3F","(position)","<p>Accepts position (Array) Returns boolean indicating whether or not the specified position does not contain …\n"],["empty_position?","Board","Board.html#method-i-empty_position-3F","()","<p>This method should return a boolean indicating whether or not there is at least one empty position on …\n"],["get_position","HumanPlayer","HumanPlayer.html#method-i-get_position","()","<p>@return [row, col] if user inputs in proper format example ‘2 1’\n"],["new","Board","Board.html#method-c-new","(num)","<p>Accepts num (Integer). Parameter represents size of the grid Initializes the grid [Array] of num (Integer …\n"],["new","Game","Game.html#method-c-new","(game_size, *players)","<p>Accepts size (Integer) of the game,  marks (:Symbol) for any number of players Initializes curr_player …\n"],["new","HumanPlayer","HumanPlayer.html#method-c-new","(mark_value)","<p>Accepts player mark (:Symbol)\n"],["place_mark","Board","Board.html#method-i-place_mark","(position, mark)","<p>accepts position (Array) and mark (Symbol) Checks if board is valid (valid?) and given position is empty …\n"],["play","Game","Game.html#method-i-play","()","<p>Runs the loop for a game by checking if there are empty positions in board Asks current user for coordinates …\n"],["print","Board","Board.html#method-i-print","()","<p>Displays the board\n"],["switch_turn","Game","Game.html#method-i-switch_turn","()","<p>Switches players by assigning new player to “@curr_player” form “@players” array …\n"],["valid?","Board","Board.html#method-i-valid-3F","(position)","<p>Accepts position (Array) Returns boolean indication wether or not given position is “in bounds” …\n"],["win?","Board","Board.html#method-i-win-3F","(mark)","<p>Accepts mark (:X) Symbol This method should return a boolean indicating whether or not the given mark …\n"],["win_col?","Board","Board.html#method-i-win_col-3F","(mark)","<p>Accepts mark (:X) Symbol Return boolean indicating whether or not the given mark has completely filled …\n"],["win_diagonal?","Board","Board.html#method-i-win_diagonal-3F","(mark)","<p>Accepts mark (:X) Symbol Return boolean indicating whether or not the given mark has completely filled …\n"],["win_row?","Board","Board.html#method-i-win_row-3F","(mark)","<p>Accepts mark (:X) Symbol Return boolean indicating whether or not the given mark has completely filled …\n"]]}}